S : Single Responsibility Principle (SRP)


	- Deplacer le InputPlayer ? (dans player ou classe distincte)

	- Classe Grid avec :
		- InitGrid deplacé de puissance 4 et morpion
		- DisplayGrid (ex DisplayPlate de puissance 4 et morpion)
		- Deplacer DisplayPlate (depuis morpion/puissance4) en le renomant

	- Classe Input avec :
		- InputPlayer (a renomer, deplacé de puissance 4 et morpion)
		- BotRandomInputGenerator (deplacé puissance 4 et morpion)
		- (a reflechir : 
			- input pour AskGame dans Launcher.cpp
			- input pour AskGameType dans Puissance 4 et Morpion
			- input pour AskPlayersName dans Puissance 4 et Morpion)

	- Classe Game avec :
		- remonter ce qui est possible depuis Morpion et Puissance 4
		- renommer PlayGame en PlayRound


O : Open/Closed Principle

	- Classe Input (ex fonctions Input de morpion et puissance 4) :
		- Scinder la fonction InputPlayer en 2 fonctions (penser a renomer) : 
			- 1 InputBot, 1 InputPlayer


L : Liskov’s Substitution Principle (LSP)

	- Principe respecté pour les heritages de Game; Rien a faire


I : Interface Segregation Principle (ISP)

	- Nos classes n'implementent pas d'interfaces inutiles : Rien a faire

D : Dependency Inversion Principle (DIP)

	- Eviter de passer des objets en paramètre lorsqu’une interface est disponible

	Nous n'avons que le Player passé en parametre pour les fonctions:
			- bool CheckWin(const Player& player) const override;
			- bool CheckWinByLine(const Player& player) const override;
			- bool CheckWinByColumn(const Player& player) const override;
	   		- bool CheckWinByDiagonal(const Player& player) const override;
			- void InputPlayer(Player player) override;

	Et aussi dans les constructeurs de Morpion et Puissance 4